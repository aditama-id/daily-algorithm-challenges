"""
Title: Find the Difference

Problem:
You are given two strings `s` and `t`. String `t` is generated by shuffling string `s` and adding one extra character at a random position.
Write a function to find the extra character added to `t`.

Constraints:
- Both strings consist of lowercase English letters.
- The length of `t` is exactly one more than the length of `s`.
- The strings may contain duplicate letters.

Examples:
Input: s = "abcd", t = "abcde"
Output: "e"

Input: s = "aabbcc", t = "abcbacd"
Output: "d"

Input: s = "x", t = "xx"
Output: "x"

Test Cases:
1. find_the_difference("abcd", "abcde") should return "e"
2. find_the_difference("aabbcc", "abcbacd") should return "d"
3. find_the_difference("x", "xx") should return "x"
4. find_the_difference("hello", "helzlo") should return "z"
5. find_the_difference("aaa", "aaaa") should return "a"
"""
from collections import Counter

def find_the_difference(s: str, t: str) -> str:
    # TODO: Implement the function to find the extra character in t
    # First Attempt
    # list_s = sorted(list(s))
    # list_t = sorted(list(t))

    # for i in range(len(list_t)):
    #   char_t = list_t[i]
    #   if(i == len(list_t) - 1):
    #     return char_t
      
    #   char_s = list_s[i]
    #   if(char_s != char_t):
    #     return char_t

    # Optimized Code
    count_s = Counter(s)
    count_t = Counter(t)

    for char in count_t:
      if count_t[char] != count_s.get(char,0):
        return char

# Test Cases
def test_find_the_difference():
    assert find_the_difference("abcd", "abcde") == "e"
    assert find_the_difference("aabbcc", "abcbacd") == "d"
    assert find_the_difference("x", "xx") == "x"
    assert find_the_difference("hello", "helzlo") == "z"
    assert find_the_difference("aaa", "aaaa") == "a"
    print("All test cases passed!")

# Run test cases
test_find_the_difference()
